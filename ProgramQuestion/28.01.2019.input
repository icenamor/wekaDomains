1 1 1 0 0 0
0 1 0 0 0 0
1 1 1 0 0 0
0 0 2 4 4 0
0 0 0 2 0 0
0 0 1 2 4 0

0 -4 -6 0 -7 -6
-1 -2 -6 -8 -3 -1
-8 -4 -2 -8 -8 -6
-3 -1 -2 -5 -7 -4
-3 -5 -3 -6 -6 -6
-3 -6 0 -8 -6 -7

-19
x 0 1 2 3 4 5

0 1 1 1 0 0 0
1 0 1 0 0 0 0
2 1 1 1 0 0 0
3 0 0 2 4 4 0
4 0 0 0 2 0 0
5 0 0 1 2 4 0



0, 0  // 7, 7 
0, 1  // 7, 4 
0, 2  // 7, 5 
0, 3  // 7, 0 
1, 0  // 7, 7 
1, 1  // 7, 4 
1, 2  // 7, 5 
1, 3  // 7, 0 
2, 0  // 7, 7 
2, 1  // 7, 4 
2, 2  // 7, 5 
2, 3  // 7, 0 
3, 0  // 7, 7 
3, 1  // 7, 4 
3, 2  // 7, 5 
3, 3  // 7, 0

 int max = (Integer.MIN_VALUE);
        for (int i = 0 ; i < arr.length; i++){
            for (int j = 0; j < arr[i].length; j++){
                int sum = 0;
                if((i+3) <= arr.length && (j + 3) <=  arr[i].length){
                    for (int x = j; x < (j+3); x++){//first line
                        sum += arr[i][x];
                    }
                    for (int x = j; x < (j+3); x++){//first line
                        sum += arr[i+2][x];
                    }
                    sum += arr[i+1][j+1];
                    if(sum > max) max = sum;
                    
                //System.out.printf("%d, %d \n", max, sum);
                }
            }
        }